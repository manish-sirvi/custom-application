{"version":3,"file":"3696.3696.ee0ddf31540bdcf976c4.js","mappings":"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","sources":["webpack://custom-app/./src/components/channel-details/conversions.js","webpack://custom-app/./src/components/channel-details/constants.js","webpack://custom-app/./src/components/channel-details/validate.js","webpack://custom-app/./src/components/channel-details/messages.js","webpack://custom-app/./src/components/channel-details/channel-details-form.jsx","webpack://custom-app/./src/components/channel-details/transform-errors.js","webpack://custom-app/./src/components/channel-details/channel-details.jsx"],"sourcesContent":["import LocalizedTextInput from '@commercetools-uikit/localized-text-input';\nimport {\n  transformLocalizedFieldToLocalizedString,\n  transformLocalizedStringToLocalizedField,\n} from '@commercetools-frontend/l10n';\n\nexport const docToFormValues = (channel, languages) => ({\n  key: channel?.key ?? '',\n  roles: channel?.roles ?? [],\n  name: LocalizedTextInput.createLocalizedString(\n    languages,\n    transformLocalizedFieldToLocalizedString(channel?.nameAllLocales ?? [])\n  ),\n});\n\nexport const formValuesToDoc = (formValues) => ({\n  key: formValues.key,\n  roles: formValues.roles,\n  nameAllLocales: transformLocalizedStringToLocalizedField(\n    LocalizedTextInput.omitEmptyTranslations(formValues.name)\n  ),\n});\n","// https://docs.commercetools.com/api/projects/channels#channelroleenum\nexport const CHANNEL_ROLES = {\n  inventorySupply: 'InventorySupply',\n  productDistribution: 'ProductDistribution',\n  orderExport: 'OrderExport',\n  orderImport: 'OrderImport',\n  primary: 'Primary',\n};\n","import TextInput from '@commercetools-uikit/text-input';\nimport omitEmpty from 'omit-empty-es';\n\nconst validate = (formikValues) => {\n  const errors = {\n    key: {},\n    roles: {},\n  };\n\n  if (TextInput.isEmpty(formikValues.key)) {\n    errors.key.missing = true;\n  }\n  if (Array.isArray(formikValues.roles) && formikValues.roles.length === 0) {\n    errors.roles.missing = true;\n  }\n  return omitEmpty(errors);\n};\n\nexport default validate;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  backToChannelsList: {\n    id: 'ChannelDetails.backToChannelsList',\n    defaultMessage: 'Back to channels list',\n  },\n  duplicateKey: {\n    id: 'ChannelDetails.duplicateKey',\n    defaultMessage: 'A channel with this key already exists.',\n  },\n  channelUpdated: {\n    id: 'ChannelDetails.channelUpdated',\n    defaultMessage: 'Channel {channelName} updated',\n  },\n  channelKeyLabel: {\n    id: 'ChannelDetails.channelKeyLabel',\n    defaultMessage: 'Channel key',\n  },\n  channelNameLabel: {\n    id: 'ChannelDetails.channelNameLabel',\n    defaultMessage: 'Channel name',\n  },\n  channelRolesLabel: {\n    id: 'ChannelDetails.channelRolesLabel',\n    defaultMessage: 'Channel roles',\n  },\n  hint: {\n    id: 'ChannelDetails.hint',\n    defaultMessage:\n      'This page demonstrates for instance how to use forms, notifications and how to update data using GraphQL, etc.',\n  },\n  modalTitle: {\n    id: 'ChannelDetails.modalTitle',\n    defaultMessage: 'Edit channel',\n  },\n  channelDetailsErrorMessage: {\n    id: 'ChannelDetails.errorMessage',\n    defaultMessage:\n      'We were unable to fetch the channel details. Please check your connection, the provided channel ID and try again.',\n  },\n});\n","import PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport { useIntl } from 'react-intl';\nimport LocalizedTextField from '@commercetools-uikit/localized-text-field';\nimport TextField from '@commercetools-uikit/text-field';\nimport Spacings from '@commercetools-uikit/spacings';\nimport SelectField from '@commercetools-uikit/select-field';\nimport { CHANNEL_ROLES } from './constants';\nimport validate from './validate';\nimport messages from './messages';\n\nconst getRoleOptions = Object.keys(CHANNEL_ROLES).map((key) => ({\n  label: CHANNEL_ROLES[key],\n  value: CHANNEL_ROLES[key],\n}));\n\nconst ChannelDetailsForm = (props) => {\n  const intl = useIntl();\n  const formik = useFormik({\n    initialValues: props.initialValues,\n    onSubmit: props.onSubmit,\n    validate,\n    enableReinitialize: true,\n  });\n\n  const formElements = (\n    <Spacings.Stack scale=\"l\">\n      <TextField\n        name=\"key\"\n        title={intl.formatMessage(messages.channelKeyLabel)}\n        value={formik.values.key}\n        errors={formik.errors.key}\n        touched={formik.touched.key}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        isReadOnly={props.isReadOnly}\n        renderError={(errorKey) => {\n          switch (errorKey) {\n            case 'duplicate':\n              return intl.formatMessage(messages.duplicateKey);\n            default:\n              return null;\n          }\n        }}\n        isRequired\n        horizontalConstraint={13}\n      />\n      <LocalizedTextField\n        name=\"name\"\n        title={intl.formatMessage(messages.channelNameLabel)}\n        value={formik.values.name}\n        errors={formik.errors.name}\n        touched={Boolean(formik.touched.name)}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        selectedLanguage={props.dataLocale}\n        isReadOnly={props.isReadOnly}\n        horizontalConstraint={13}\n      />\n      <SelectField\n        name=\"roles\"\n        title={intl.formatMessage(messages.channelRolesLabel)}\n        value={formik.values.roles}\n        errors={formik.errors.roles}\n        touched={formik.touched.roles}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        isMulti\n        options={getRoleOptions}\n        isReadOnly={props.isReadOnly}\n        isRequired\n        horizontalConstraint={13}\n      />\n    </Spacings.Stack>\n  );\n\n  return props.children({\n    formElements,\n    values: formik.values,\n    isDirty: formik.dirty,\n    isSubmitting: formik.isSubmitting,\n    submitForm: formik.handleSubmit,\n    resetForm: formik.resetForm,\n  });\n};\nChannelDetailsForm.displayName = 'ChannelDetailsForm';\nChannelDetailsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.shape({\n    id: PropTypes.string,\n    key: PropTypes.string,\n    name: PropTypes.object,\n    version: PropTypes.number,\n    roles: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }),\n  isReadOnly: PropTypes.bool.isRequired,\n  dataLocale: PropTypes.string.isRequired,\n};\n\nexport default ChannelDetailsForm;\n","import omitEmpty from 'omit-empty-es';\n\nconst DUPLICATE_FIELD_ERROR_CODE = 'DuplicateField';\n\n/**\n * TransformedErrors: { unmappedErrors: [], formErrors: {} }\n *\n * @param  Object graphqlError\n * @return Object TransformedErrors\n */\n\nexport const transformErrors = (graphQlErrors) => {\n  const errorsToMap = Array.isArray(graphQlErrors)\n    ? graphQlErrors\n    : [graphQlErrors];\n\n  const { formErrors, unmappedErrors } = errorsToMap.reduce(\n    (transformedErrors, graphQlError) => {\n      const errorCode = graphQlError?.extensions?.code ?? graphQlError.code;\n      const fieldName = graphQlError?.extensions?.field ?? graphQlError.field;\n\n      if (errorCode === DUPLICATE_FIELD_ERROR_CODE) {\n        transformedErrors.formErrors[fieldName] = { duplicate: true };\n      } else {\n        transformedErrors.unmappedErrors.push(graphQlError);\n      }\n      return transformedErrors;\n    },\n    {\n      formErrors: {}, // will be mappped to form field error messages\n      unmappedErrors: [], // will result in dispatching `showApiErrorNotification`\n    }\n  );\n\n  return {\n    formErrors: omitEmpty(formErrors),\n    unmappedErrors,\n  };\n};\n","import PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport {\n  PageNotFound,\n  FormModalPage,\n} from '@commercetools-frontend/application-components';\nimport { ContentNotification } from '@commercetools-uikit/notifications';\nimport Text from '@commercetools-uikit/text';\nimport Spacings from '@commercetools-uikit/spacings';\nimport LoadingSpinner from '@commercetools-uikit/loading-spinner';\nimport { useCallback } from 'react';\nimport { useApplicationContext } from '@commercetools-frontend/application-shell-connectors';\nimport { formatLocalizedString } from '@commercetools-frontend/l10n';\nimport { DOMAINS, NO_VALUE_FALLBACK } from '@commercetools-frontend/constants';\nimport { useIsAuthorized } from '@commercetools-frontend/permissions';\nimport {\n  useShowNotification,\n  useShowApiErrorNotification,\n} from '@commercetools-frontend/actions-global';\nimport { PERMISSIONS } from '../../constants';\nimport {\n  useChannelDetailsUpdater,\n  useChannelDetailsFetcher,\n} from '../../hooks/use-channels-connector';\nimport { docToFormValues, formValuesToDoc } from './conversions';\nimport ChannelsDetailsForm from './channel-details-form';\nimport { transformErrors } from './transform-errors';\nimport messages from './messages';\n\nconst ChannelDetails = (props) => {\n  const intl = useIntl();\n  const params = useParams();\n  const { loading, error, channel } = useChannelDetailsFetcher(params.id);\n  const { dataLocale, projectLanguages } = useApplicationContext((context) => ({\n    dataLocale: context.dataLocale,\n    projectLanguages: context.project.languages,\n  }));\n  const canManage = useIsAuthorized({\n    demandedPermissions: [PERMISSIONS.Manage],\n  });\n  const showNotification = useShowNotification();\n  const showApiErrorNotification = useShowApiErrorNotification();\n  const channelDetailsUpdater = useChannelDetailsUpdater();\n  const handleSubmit = useCallback(\n    async (formikValues, formikHelpers) => {\n      const data = formValuesToDoc(formikValues);\n      try {\n        await channelDetailsUpdater.execute({\n          originalDraft: channel,\n          nextDraft: data,\n        });\n        showNotification({\n          kind: 'success',\n          domain: DOMAINS.SIDE,\n          text: intl.formatMessage(messages.channelUpdated, {\n            channelName: formatLocalizedString(formikValues, {\n              key: 'name',\n              locale: dataLocale,\n              fallbackOrder: projectLanguages,\n            }),\n          }),\n        });\n      } catch (graphQLErrors) {\n        const transformedErrors = transformErrors(graphQLErrors);\n        if (transformedErrors.unmappedErrors.length > 0)\n          showApiErrorNotification({\n            errors: transformedErrors.unmappedErrors,\n          });\n\n        formikHelpers.setErrors(transformedErrors.formErrors);\n      }\n    },\n    [\n      channel,\n      channelDetailsUpdater,\n      dataLocale,\n      intl,\n      projectLanguages,\n      showApiErrorNotification,\n      showNotification,\n    ]\n  );\n\n  return (\n    <ChannelsDetailsForm\n      initialValues={docToFormValues(channel, projectLanguages)}\n      onSubmit={handleSubmit}\n      isReadOnly={!canManage}\n      dataLocale={dataLocale}\n    >\n      {(formProps) => {\n        return (\n          <FormModalPage\n            title={formatLocalizedString(\n              {\n                name: formProps.values?.name,\n              },\n              {\n                key: 'name',\n                locale: dataLocale,\n                fallbackOrder: projectLanguages,\n                fallback: NO_VALUE_FALLBACK,\n              }\n            )}\n            isOpen\n            onClose={props.onClose}\n            isPrimaryButtonDisabled={\n              formProps.isSubmitting || !formProps.isDirty || !canManage\n            }\n            isSecondaryButtonDisabled={!formProps.isDirty}\n            onSecondaryButtonClick={formProps.resetForm}\n            onPrimaryButtonClick={formProps.submitForm}\n            labelPrimaryButton={FormModalPage.Intl.save}\n            labelSecondaryButton={FormModalPage.Intl.revert}\n          >\n            {loading && (\n              <Spacings.Stack alignItems=\"center\">\n                <LoadingSpinner />\n              </Spacings.Stack>\n            )}\n            {error && (\n              <ContentNotification type=\"error\">\n                <Text.Body>\n                  {intl.formatMessage(messages.channelDetailsErrorMessage)}\n                </Text.Body>\n              </ContentNotification>\n            )}\n            {channel && formProps.formElements}\n            {channel === null && <PageNotFound />}\n          </FormModalPage>\n        );\n      }}\n    </ChannelsDetailsForm>\n  );\n};\nChannelDetails.displayName = 'ChannelDetails';\nChannelDetails.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ChannelDetails;\n"],"names":["docToFormValues","channel","languages","key","roles","name","LocalizedTextInput","transformLocalizedFieldToLocalizedString","nameAllLocales","formValuesToDoc","formValues","transformLocalizedStringToLocalizedField","CHANNEL_ROLES","inventorySupply","productDistribution","orderExport","orderImport","primary","validate","formikValues","errors","TextInput","missing","length","omitEmpty","defineMessages","backToChannelsList","id","defaultMessage","duplicateKey","channelUpdated","channelKeyLabel","channelNameLabel","channelRolesLabel","hint","modalTitle","channelDetailsErrorMessage","getRoleOptions","label","value","ChannelDetailsForm","props","intl","useIntl","formik","useFormik","initialValues","onSubmit","enableReinitialize","formElements","scale","title","formatMessage","messages","touched","onChange","handleChange","onBlur","handleBlur","isReadOnly","renderError","errorKey","isRequired","horizontalConstraint","Boolean","selectedLanguage","dataLocale","isMulti","options","children","values","isDirty","dirty","isSubmitting","submitForm","handleSubmit","resetForm","displayName","transformErrors","graphQlErrors","errorsToMap","transformedErrors","graphQlError","errorCode","extensions","code","fieldName","field","formErrors","duplicate","unmappedErrors","push","ChannelDetails","params","useParams","useChannelDetailsFetcher","loading","error","useApplicationContext","context","projectLanguages","project","canManage","useIsAuthorized","demandedPermissions","PERMISSIONS","showNotification","useShowNotification","showApiErrorNotification","useShowApiErrorNotification","channelDetailsUpdater","useChannelDetailsUpdater","useCallback","formikHelpers","data","execute","originalDraft","nextDraft","kind","domain","DOMAINS","text","channelName","formatLocalizedString","locale","fallbackOrder","setErrors","formProps","fallback","NO_VALUE_FALLBACK","isOpen","onClose","isPrimaryButtonDisabled","isSecondaryButtonDisabled","onSecondaryButtonClick","onPrimaryButtonClick","labelPrimaryButton","FormModalPage","labelSecondaryButton","alignItems","type"],"sourceRoot":""}